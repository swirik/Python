import cv2
import numpy as np
from PIL import Image
import os
import platform
import subprocess

def convert_to_dotted_hands(input_image_path, dot_spacing=8, threshold_value=120, 
                           background_color=(0, 0, 0), dot_color=(255, 255, 255)):
    """Convert an image to a dotted representation with only the hands being dotted."""
    # Load the input image
    input_image = Image.open(input_image_path)
    
    # Set exact screen dimensions
    screen_width, screen_height = 3840, 2160
    
    # Create a new black background image
    dotted_image = Image.new('RGB', (screen_width, screen_height), background_color)
    
    # Resize input image to fit screen while maintaining aspect ratio
    width_ratio = screen_width / input_image.width
    height_ratio = screen_height / input_image.height
    ratio = min(width_ratio, height_ratio) * 0.9  # Use 90% of screen to leave margins
    
    new_width = int(input_image.width * ratio)
    new_height = int(input_image.height * ratio)
    resized_image = input_image.resize((new_width, new_height), Image.LANCZOS)
    
    # Calculate position to center the image
    x_offset = (screen_width - new_width) // 2
    y_offset = (screen_height - new_height) // 2
    
    # Convert to numpy array for processing
    img_array = np.array(resized_image)
    
    # Convert to grayscale
    if len(img_array.shape) == 3:
        gray_img = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
    else:
        gray_img = img_array
    
    # Apply adaptive thresholding to better isolate the hands
    thresholded = cv2.adaptiveThreshold(
        gray_img, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
        cv2.THRESH_BINARY_INV, 11, 2)
    
    # Refine the threshold to better isolate hands
    _, binary = cv2.threshold(gray_img, threshold_value, 255, cv2.THRESH_BINARY)
    
    # Morphological operations to clean up the image
    kernel = np.ones((3, 3), np.uint8)
    opening = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel, iterations=2)
    
    # Convert back to PIL image for drawing
    draw_image = np.array(dotted_image)
    
    # Create dots based on the thresholded image
    for y in range(0, opening.shape[0], dot_spacing):
        for x in range(0, opening.shape[1], dot_spacing):
            if y < opening.shape[0] and x < opening.shape[1] and opening[y, x] > 128:
                # If pixel is part of the hands (white in our binary image)
                cv2.circle(draw_image, (x + x_offset, y + y_offset), 2, dot_color, -1)
    
    return Image.fromarray(draw_image)

def set_as_wallpaper(image_path):
    """Set an image as the desktop wallpaper."""
    system = platform.system()
    
    if system == "Windows":
        import ctypes
        ctypes.windll.user32.SystemParametersInfoW(20, 0, image_path, 3)
        return True
    elif system == "Darwin":  # macOS
        script = f'''tell application "System Events"
                        set desktop picture to POSIX file "{image_path}"
                    end tell'''
        subprocess.run(['osascript', '-e', script])
        return True
    elif system == "Linux":
        # This works for GNOME
        subprocess.run(['gsettings', 'set', 'org.gnome.desktop.background', 'picture-uri', f'file://{image_path}'])
        return True
    
    return False

def main():
    # Use your local image path
    input_image_path = r"C:\Users\MJ\Desktop\Hands.png"
    
    if not os.path.exists(input_image_path):
        print(f"Error: The file {input_image_path} does not exist.")
        return
    
    print("Converting to dotted hands style...")
    
    # You can adjust these parameters to get the best result
    dotted_image = convert_to_dotted_hands(
        input_image_path, 
        dot_spacing=8,          # Spacing between dots (smaller = more dense)
        threshold_value=120,    # Threshold to determine what's part of the hands (adjust as needed)
        background_color=(0, 0, 0),  # Pure black background
        dot_color=(173, 216, 230)    # Light blue dots (like in the reference image)
    )
    
    # Save the result
    output_dir = os.path.dirname(input_image_path)
    output_path = os.path.join(output_dir, "dotted_hands_wallpaper.png")
    dotted_image.save(output_path)
    print(f"Image saved to: {output_path}")
    
    # Set as wallpaper
    print("Setting as wallpaper...")
    if set_as_wallpaper(output_path):
        print("Successfully set as wallpaper!")
    else:
        print(f"Could not set as wallpaper automatically. The image is saved at: {output_path}")
    
    # Show the image
    dotted_image.show()

if __name__ == "__main__":
    main()